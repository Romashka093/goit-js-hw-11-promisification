{"version":3,"sources":["webpack:///./js/task-01.js","webpack:///./js/task-02.js","webpack:///./js/task-03.js"],"names":["delay","ms","Promise","resolve","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","setTimeout","updatedUsers","map","user","table","makeTransaction","transaction","min","max","Math","floor","random","reject","id","logSuccess","amount","logError","warn","catch"],"mappings":"2JAMMA,EAAQ,SAAAC,GACV,OAAOC,QAAQC,QAAQF,IAGrBG,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBL,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,MAAMQ,KAAKJ,G,kCCVXK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAarBC,EAAkB,SAACC,EAAUC,GAE/B,OAAO,IAAIZ,SAAQ,SAAAC,GACfY,YAAW,WACP,IAAMC,EAAeH,EAASI,KAAI,SAAAC,GAAI,OAClCA,EAAKR,OAASI,EAAd,iBAA8BI,EAA9B,CAAoCP,QAASO,EAAKP,SAAWO,KAEjEf,EAAQa,QAGb,MAGDZ,EAAS,SAAAY,GAAY,OAAIV,QAAQa,MAAMH,IAW7CJ,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GC1CnC,IAsBMgB,EAAkB,SAACC,GACrB,IAvB+BC,EAAKC,EAuB9BvB,GAvByBsB,EAuBS,IAvBJC,EAuBS,IAtBtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAwBpD,OAAO,IAAIpB,SAAQ,SAACC,EAASwB,GAEzBZ,YAAW,WACYS,KAAKE,SAAW,GAE/BvB,EAAQkB,GAERM,EAAON,EAAYO,MAExB5B,OAIL6B,EAAa,SAAC,GAAmB,IAAjBD,EAAiB,EAAjBA,GAAIE,EAAa,EAAbA,OACtBxB,QAAQC,IAAR,eAA2BqB,EAA3B,iBAA8CE,EAA9C,QAGEC,EAAW,SAAAH,GACbtB,QAAQ0B,KAAR,gCAA6CJ,EAA7C,8BAaJR,EAAgB,CAAEQ,GAAI,GAAIE,OAAQ,MAC7BtB,KAAKqB,GACLI,MAAMF,GAEXX,EAAgB,CAAEQ,GAAI,GAAIE,OAAQ,MAC7BtB,KAAKqB,GACLI,MAAMF,GAEXX,EAAgB,CAAEQ,GAAI,GAAIE,OAAQ,KAC7BtB,KAAKqB,GACLI,MAAMF,GAEXX,EAAgB,CAAEQ,GAAI,GAAIE,OAAQ,MAC7BtB,KAAKqB,GACLI,MAAMF,K","file":"main.11e160d08d5d6366389e.js","sourcesContent":["// // Напиши функцию delay(ms), которая возвращает промис,\n// // переходящий в состояние \"resolved\" через ms \n// // миллисекунд. Значением исполнившегося промиса должно\n// // быть то кол-во миллисекунд которое передали во время\n// // вызова функции delay.\n\nconst delay = ms => {\n    return Promise.resolve(ms)\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n","// Перепиши функцию toggleUserState() так, \n// чтобы она не использовала callback-функцию callback,\n// а принимала всего два параметра allUsers и userName\n// и возвращала промис.\n\nconst users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n];\n// // before:\n\n// const toggleUserState = (allUsers, userName, callback) => {\n// const updatedUsers = allUsers.map(user =>\n//     user.name === userName ? { ...user, active: !user.active } : user,\n// );\n\n//     callback(updatedUsers);\n// };\n\n// and now:\nconst toggleUserState = (allUsers, userName) => {\n\n    return new Promise(resolve => {\n        setTimeout(() => {\n            const updatedUsers = allUsers.map(user =>\n                user.name === userName ? { ...user, active: !user.active } : user,\n            );\n            resolve(updatedUsers);\n        });\n\n    }, 1000);\n}\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n// /*\n//  * Работало так:\n//  */\n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n\n// /*\n//  * Сейчас работать так:\n//  */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n","// Перепиши функцию makeTransaction() так,\n// чтобы она не использовала callback-функции\n// onSuccess и onError, а принимала всего один параметр\n// transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\n// // before:\n\n// const makeTransaction = (transaction, onSuccess, onError) => {\n//     const delay = randomIntegerFromInterval(200, 500);\n\n//     setTimeout(() => {\n//         const canProcess = Math.random() > 0.3;\n\n//         if (canProcess) {\n//             onSuccess(transaction.id, delay);\n//         } else {\n//             onError(transaction.id);\n//         }\n//     }, delay);\n// };\n\n// and now:\n\nconst makeTransaction = (transaction) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    return new Promise((resolve, reject) => {\n\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n            if (canProcess) {\n                resolve(transaction);\n            } else {\n                reject(transaction.id)\n            }\n        }, delay);\n    })\n}\n\nconst logSuccess = ({ id, amount }) => {\n    console.log(`Transaction ${id} processed in ${amount} ms`);\n};\n\nconst logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n// /*\n//  * Работало так:\n//  */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Сейчас работать так:\n */\nmakeTransaction({ id: 70, amount: 150 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n    .then(logSuccess)\n    .catch(logError);"],"sourceRoot":""}