{"version":3,"sources":["webpack:///./js/task-03.js"],"names":["makeTransaction","transaction","min","max","delay","Math","floor","random","Promise","resolve","reject","setTimeout","id","logSuccess","amount","console","log","logError","warn","then","catch"],"mappings":"0HA2BMA,EAAkB,SAACC,GACrB,IAvB+BC,EAAKC,EAuB9BC,GAvByBF,EAuBS,IAvBJC,EAuBS,IAtBtCE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,GAAKA,IAwBpD,OAAO,IAAIM,SAAQ,SAACC,EAASC,GAEzBC,YAAW,WACYN,KAAKE,SAAW,GAE/BE,EAAQR,GAERS,EAAOT,EAAYW,MAExBR,OAILS,EAAa,SAAC,GAAmB,IAAjBD,EAAiB,EAAjBA,GAAIE,EAAa,EAAbA,OACtBC,QAAQC,IAAR,eAA2BJ,EAA3B,iBAA8CE,EAA9C,QAGEG,EAAW,SAAAL,GACbG,QAAQG,KAAR,gCAA6CN,EAA7C,8BAaJZ,EAAgB,CAAEY,GAAI,GAAIE,OAAQ,MAC7BK,KAAKN,GACLO,MAAMH,GAEXjB,EAAgB,CAAEY,GAAI,GAAIE,OAAQ,MAC7BK,KAAKN,GACLO,MAAMH,GAEXjB,EAAgB,CAAEY,GAAI,GAAIE,OAAQ,KAC7BK,KAAKN,GACLO,MAAMH,GAEXjB,EAAgB,CAAEY,GAAI,GAAIE,OAAQ,MAC7BK,KAAKN,GACLO,MAAMH,K","file":"main.d8676daf399c4ec708ff.js","sourcesContent":["// Перепиши функцию makeTransaction() так,\n// чтобы она не использовала callback-функции\n// onSuccess и onError, а принимала всего один параметр\n// transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\n// // before:\n\n// const makeTransaction = (transaction, onSuccess, onError) => {\n//     const delay = randomIntegerFromInterval(200, 500);\n\n//     setTimeout(() => {\n//         const canProcess = Math.random() > 0.3;\n\n//         if (canProcess) {\n//             onSuccess(transaction.id, delay);\n//         } else {\n//             onError(transaction.id);\n//         }\n//     }, delay);\n// };\n\n// and now:\n\nconst makeTransaction = (transaction) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    return new Promise((resolve, reject) => {\n\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n            if (canProcess) {\n                resolve(transaction);\n            } else {\n                reject(transaction.id)\n            }\n        }, delay);\n    })\n}\n\nconst logSuccess = ({ id, amount }) => {\n    console.log(`Transaction ${id} processed in ${amount} ms`);\n};\n\nconst logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n// /*\n//  * Работало так:\n//  */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Сейчас работать так:\n */\nmakeTransaction({ id: 70, amount: 150 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n    .then(logSuccess)\n    .catch(logError);"],"sourceRoot":""}