{"version":3,"sources":["webpack:///./js/task-01.js","webpack:///./js/task-02.js","webpack:///./js/task-03.js","webpack:///./index.js"],"names":["delay","ms","logger","time","console","log","then","toggleUserState","users","name","active","allUsers","userName","callback","map","user","updatedUsers","table","makeTransaction","transaction","onSuccess","onError","min","max","Math","floor","random","setTimeout","id","logSuccess","logError","warn","amount","catch","task01","task02","task03"],"mappings":"uIAIMA,EAAQ,SAAAC,KAIRC,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,aAGvBH,GAAYM,KAAKJ,SACjBF,GAAYM,KAAKJ,SACjBF,GAAYM,KAAKJ,GAEFF,QCfAO,G,8BAAAA,GAKTC,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGrBH,EAAkB,SAACI,EAAUC,EAAUC,GAKzCA,EAJqBF,EAASG,KAAI,SAAAC,GAAI,OAClCA,EAAKN,OAASG,EAAd,iBAA8BG,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,OAM/Db,EAAS,SAAAc,GAAY,OAAIZ,QAAQa,MAAMD,IAK7CT,EAAgBC,EAAO,QAASN,GAChCK,EAAgBC,EAAO,MAAON,GAK9BK,EAAgBC,EAAO,SAASF,KAAKJ,GACrCK,EAAgBC,EAAO,OAAOF,KAAKJ,GChCpBgB,QASTA,EAAkB,SAACC,EAAaC,EAAWC,GAC7C,IAL+BC,EAAKC,EAK9BvB,GALyBsB,EAKS,IALJC,EAKS,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMpDK,YAAW,WACYH,KAAKE,SAAW,GAG/BN,EAAUD,EAAYS,GAAI5B,GAE1BqB,EAAQF,EAAYS,MAEzB5B,IAGD6B,EAAa,SAACD,EAAIzB,GACpBC,QAAQC,IAAR,eAA2BuB,EAA3B,iBAA8CzB,EAA9C,OAGE2B,EAAW,SAAAF,GACbxB,QAAQ2B,KAAR,gCAA6CH,EAA7C,8BAMJV,EAAgB,CAAEU,GAAI,GAAII,OAAQ,KAAOH,EAAYC,GACrDZ,EAAgB,CAAEU,GAAI,GAAII,OAAQ,KAAOH,EAAYC,GACrDZ,EAAgB,CAAEU,GAAI,GAAII,OAAQ,IAAMH,EAAYC,GACpDZ,EAAgB,CAAEU,GAAI,GAAII,OAAQ,KAAOH,EAAYC,GAIrDZ,EAAgB,CAAEU,GAAI,GAAII,OAAQ,MAC7B1B,KAAKuB,GACLI,MAAMH,GAEXZ,EAAgB,CAAEU,GAAI,GAAII,OAAQ,MAC7B1B,KAAKuB,GACLI,MAAMH,GAEXZ,EAAgB,CAAEU,GAAI,GAAII,OAAQ,KAC7B1B,KAAKuB,GACLI,MAAMH,GAEXZ,EAAgB,CAAEU,GAAI,GAAII,OAAQ,MAC7B1B,KAAKuB,GACLI,MAAMH,GClDX1B,QAAQC,IAAI6B,GACZ9B,QAAQC,IAAI8B,GACZ/B,QAAQC,IAAI+B,K","file":"main.e256a7d92bc80f25ec18.js","sourcesContent":["\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд. \n// Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\n\nconst delay = ms => {\n    // Твой код\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\nexport default delay;","export default toggleUserState;\n\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, \n// а принимала всего два параметра allUsers и userName и возвращала промис.\n\nconst users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName, callback) => {\n    const updatedUsers = allUsers.map(user =>\n        user.name === userName ? { ...user, active: !user.active } : user,\n    );\n\n    callback(updatedUsers);\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n/*\n * Сейчас работает так\n */\ntoggleUserState(users, 'Mango', logger);\ntoggleUserState(users, 'Lux', logger);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);","export default makeTransaction;\n\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError,\n// а принимала всего один параметр transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction, onSuccess, onError) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    setTimeout(() => {\n        const canProcess = Math.random() > 0.3;\n\n        if (canProcess) {\n            onSuccess(transaction.id, delay);\n        } else {\n            onError(transaction.id);\n        }\n    }, delay);\n};\n\nconst logSuccess = (id, time) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\nmakeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\nmakeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\nmakeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\nmakeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n    .then(logSuccess)\n    .catch(logError);","import './styles.css';\nimport task01 from './js/task-01';\nimport task02 from './js/task-02';\nimport task03 from './js/task-03';\n\nconsole.log(task01);\nconsole.log(task02);\nconsole.log(task03);"],"sourceRoot":""}